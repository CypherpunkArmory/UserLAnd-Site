{"version":3,"sources":["webpack:///./src/pages/account-recovery.js","webpack:///./src/components/seo.js","webpack:///./src/components/Button/index.js","webpack:///./src/redux/ducks/account/selectors.js","webpack:///./src/components/TextFieldGroup/index.js","webpack:///./src/utils/validation.js"],"names":["AccountRecovery","submitedTimer","state","email","errors","submited","isValid","_validateInput","validateInput","_this","setState","handleUpdate","event","_this$setState","target","name","value","handleSubmit","preventDefault","props","sendResetEmail","setTimeout","componentWillUnmount","clearInterval","this","render","_this$state","_this$props","submitError","isLoading","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","_components_seo__WEBPACK_IMPORTED_MODULE_3__","title","style","marginBottom","reactstrap__WEBPACK_IMPORTED_MODULE_5__","onSubmit","_components_TextFieldGroup__WEBPACK_IMPORTED_MODULE_7__","label","type","field","onChange","id","placeholder","error","_components_Button__WEBPACK_IMPORTED_MODULE_6__","disabled","round","Component","connect","getError","accountIsLoading","dispatch","request","SEO","_ref","description","lang","meta","children","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","data","metaDescription","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","content","property","author","concat","defaultProps","Button","icon","Tag","tag","danger","attributes","_objectWithoutPropertiesLoose","href","react__WEBPACK_IMPORTED_MODULE_6___default","Object","assign","onClick","undefined","babel_plugin_react_css_modules_dist_browser_getClassName__WEBPACK_IMPORTED_MODULE_5___default","classNames","btn_round","btn_primary","btn_danger","_styleModuleImportMap","__webpack_require__","d","__webpack_exports__","getIsLoggedIn","getAccountDetails","reselect__WEBPACK_IMPORTED_MODULE_0__","getAccount","accountState","account","createSelector","access_token","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","reactstrap__WEBPACK_IMPORTED_MODULE_2__","reactstrap__WEBPACK_IMPORTED_MODULE_3__","reactstrap__WEBPACK_IMPORTED_MODULE_4__","_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_6__","TextFieldGroup","for","hidden","invalid","tooltip","prototype","PropTypes","string","isRequired","object","func","validator__WEBPACK_IMPORTED_MODULE_0__","lodash__WEBPACK_IMPORTED_MODULE_1__","hasOwnProperty","isEmpty","isEmail","domain_specific_validation","password","oldPassword","newPassword"],"mappings":"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","file":"component---src-pages-account-recovery-js-f0d5f23f9f9d926ec7e4.js","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport SEO from '../components/seo'\n\nimport '../components/Login/login.module.scss'\n\nimport { Form } from 'reactstrap'\nimport Button from '../components/Button'\nimport TextFieldGroup from '../components/TextFieldGroup'\n\nimport { validateInput } from '../utils/validation'\nimport { sendResetEmail } from '../redux/ducks/account/actions'\nimport { getError, accountIsLoading } from '../redux/ducks/account/selectors'\n\nclass AccountRecovery extends Component {\n  submitedTimer = null\n\n  state = {\n    email: '',\n    errors: {},\n    submited: false,\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.submitedTimer)\n  }\n\n  isValid = () => {\n    const { errors, isValid } = validateInput(this.state)\n    this.setState({\n      errors,\n    })\n    return isValid\n  }\n\n  handleUpdate = event => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    })\n  }\n\n  handleSubmit = event => {\n    event.preventDefault()\n\n    if (this.isValid()) {\n      this.props.sendResetEmail(this.state.email)\n    }\n    this.setState({\n      submited: true,\n    })\n\n    this.submitedTimer = setTimeout(() => {\n      this.setState({\n        submited: false,\n      })\n    }, 4400)\n  }\n\n  render() {\n    const { errors, submited } = this.state\n    const { submitError, isLoading } = this.props\n\n    return (\n      <div className=\"page\">\n        <SEO title=\"UserLAnd Reset Password\" />\n        <div className=\"container page__header\">\n          <h2>Recover Password</h2>\n        </div>\n        <div className=\"container\" style={{ marginBottom: '7rem' }}>\n          <Form\n            onSubmit={this.handleSubmit}\n            className=\"mx-auto text-center\"\n            styleName=\"form\"\n          >\n            <TextFieldGroup\n              label=\"Email\"\n              type=\"email\"\n              field=\"email\"\n              onChange={this.handleUpdate}\n              id=\"resetEmail\"\n              placeholder=\"Enter Email\"\n              styleName=\"form__input\"\n              error={errors.email}\n            />\n            {submitError && submited && (\n              <span styleName=\"form__alert\">Something Wrong Happened</span>\n            )}\n            <Button styleName=\"form__btn\" disabled={isLoading} round>\n              submit\n            </Button>\n          </Form>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    submitError: getError(state),\n    isLoading: accountIsLoading(state),\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    sendResetEmail: email => {\n      dispatch(sendResetEmail.request(email))\n    },\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AccountRecovery)\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, title, children }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s - ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    >\n      {children}\n    </Helmet>\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  children: PropTypes.node,\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport './button.module.scss'\n\nfunction Button(props) {\n  let {\n    children,\n    icon,\n    tag: Tag,\n    className,\n    danger,\n    round,\n    ...attributes\n  } = props\n\n  if (attributes.href && Tag === 'button') {\n    Tag = 'a'\n  }\n\n  return (\n    <Tag\n      styleName={classNames('btn', {\n        btn_round: round,\n        btn_primary: !danger,\n        btn_danger: danger,\n      })}\n      className={className}\n      type={Tag === 'button' && attributes.onClick ? 'button' : undefined}\n      {...attributes}\n    >\n      {children}\n      {icon && <span styleName=\"icon\" />}\n    </Tag>\n  )\n}\n\nButton.propTypes = {\n  active: PropTypes.bool,\n  'aria-label': PropTypes.string,\n  disabled: PropTypes.bool,\n  tag: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.string,\n    PropTypes.object,\n  ]),\n  innerRef: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.func,\n    PropTypes.string,\n  ]),\n  onClick: PropTypes.func,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  danger: PropTypes.bool,\n  round: PropTypes.bool,\n}\n\nButton.defaultProps = {\n  tag: 'button',\n  danger: false,\n  round: false,\n}\n\nexport default Button\n","import { createSelector } from 'reselect'\n\nconst getAccount = state => state.accountState.account\nexport const accountIsLoading = state => state.accountState.isLoading\n\nexport const getError = state => state.accountState.error\n\nexport const getIsLoggedIn = createSelector(\n  [getAccount],\n  account => !!account && !!account.access_token\n)\n\nexport const getAccountDetails = createSelector(\n  [getAccount],\n  account => account\n)\n\nexport const getIsAccountDetailLoaded = createSelector(\n  [getAccount],\n  account => !!account\n)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { FormGroup, Label, Input, FormFeedback } from 'reactstrap'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport './TextFieldGroup.module.scss'\n\nfunction TextFieldGroup({\n  field,\n  type,\n  label,\n  placeholder,\n  id,\n  error,\n  onChange,\n  className,\n}) {\n  return (\n    <FormGroup styleName=\"form\">\n      <Label for={id} hidden>\n        {label}\n      </Label>\n      <Input\n        type={type}\n        name={field}\n        onChange={onChange}\n        id={id}\n        placeholder={placeholder}\n        invalid={!!error}\n        className={className}\n      />\n      {error && (\n        <FormFeedback tooltip>\n          <FontAwesomeIcon icon={['fa', 'exclamation-triangle']} />\n          {error}\n        </FormFeedback>\n      )}\n    </FormGroup>\n  )\n}\n\nTextFieldGroup.prototype = {\n  field: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  id: PropTypes.string,\n  error: PropTypes.object,\n  onChange: PropTypes.func.isRequired,\n}\n\nexport default TextFieldGroup\n","import { isEmail } from 'validator'\nimport { isEmpty } from 'lodash'\n\nexport const validateInput = data => {\n  let errors = {}\n\n  if (data.hasOwnProperty('email')) {\n    if (isEmpty(data.email)) {\n      errors.email = 'This field is required'\n    }\n    if (!isEmail(data.email, { domain_specific_validation: true })) {\n      errors.email = 'Email is invalid'\n    }\n  }\n\n  if (data.hasOwnProperty('password') && isEmpty(data.password)) {\n    errors.password = 'This field is required'\n  }\n\n  if (data.hasOwnProperty('oldPassword') && isEmpty(data.oldPassword)) {\n    errors.oldPassword = 'This field is required'\n  }\n\n  if (data.hasOwnProperty('newPassword') && isEmpty(data.newPassword)) {\n    errors.newPassword = 'This field is required'\n  }\n\n  return {\n    errors,\n    isValid: isEmpty(errors),\n  }\n}\n"],"sourceRoot":""}